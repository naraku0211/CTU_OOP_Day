/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import controllers.BankConnection;
import controllers.DataStore;
import javax.swing.*;
import java.sql.*;
import java.util.logging.*;

/**
 *
 * @author 63921
 */
public class UserMainDashboard extends JFrame {

    /**
     * Creates new form UserMainDashboard
     */
    private Connection conn;
    private PreparedStatement smt1, smt2;
    private ResultSet rs1, rs2;
    private double userBalance, transferBalance;
    private String userAccountNumber, transferAccountNumber;
    
    public UserMainDashboard() {
        
        initComponents();
        setLocationRelativeTo(null);
        try {
            BankConnection connection = new BankConnection();
            conn = connection.getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
        userAccountNumber = DataStore.getInstance().getStringData();
        setTitle("Account Number: " + userAccountNumber);  
        try {
            String query = "SELECT balance from accounts WHERE account_number=?"; 
            smt1 = conn.prepareStatement(query);
            smt1.setString(1, userAccountNumber);
            rs1 = smt1.executeQuery();
            
            while(rs1.next()){
                userBalance = rs1.getDouble("balance"); 
                //System.out.println(balance);       
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_deposit = new javax.swing.JButton();
        jButton_withdraw = new javax.swing.JButton();
        jButton_balanceInquiiry = new javax.swing.JButton();
        jButton_transfer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 350));

        jButton_deposit.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton_deposit.setText("Deposit");
        jButton_deposit.setPreferredSize(new java.awt.Dimension(200, 75));
        jButton_deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_depositActionPerformed(evt);
            }
        });

        jButton_withdraw.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton_withdraw.setText("Withdraw");
        jButton_withdraw.setPreferredSize(new java.awt.Dimension(200, 75));
        jButton_withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_withdrawActionPerformed(evt);
            }
        });

        jButton_balanceInquiiry.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton_balanceInquiiry.setText("Balance Inquiry");
        jButton_balanceInquiiry.setPreferredSize(new java.awt.Dimension(200, 75));
        jButton_balanceInquiiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_balanceInquiiryActionPerformed(evt);
            }
        });

        jButton_transfer.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton_transfer.setText("Transfer");
        jButton_transfer.setPreferredSize(new java.awt.Dimension(200, 75));
        jButton_transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_balanceInquiiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_withdraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_transfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_withdraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_balanceInquiiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_transfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton_depositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_depositActionPerformed
        deposit();
    }//GEN-LAST:event_jButton_depositActionPerformed

    private void jButton_withdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_withdrawActionPerformed
        // TODO add your handling code here:
        withdraw();
    }//GEN-LAST:event_jButton_withdrawActionPerformed

    private void jButton_balanceInquiiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_balanceInquiiryActionPerformed
        // TODO add your handling code here:
        balanceInquiry();
    }//GEN-LAST:event_jButton_balanceInquiiryActionPerformed

    private void jButton_transferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transferActionPerformed
        // TODO add your handling code here:
        transfer();
    }//GEN-LAST:event_jButton_transferActionPerformed

    private void deposit(){
        try {
            // TODO add your handling code here: 
            double depositAmount = Double.parseDouble(JOptionPane.showInputDialog(null, "How much to deposit: ", "Deposit", JOptionPane.INFORMATION_MESSAGE));
            int confirmDeposit = JOptionPane.showConfirmDialog(null, "Confirm Deposit", "Deposit", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if(confirmDeposit == JOptionPane.YES_OPTION){      
                String query = "UPDATE bank_db.accounts SET balance=? WHERE account_number=?";
                smt1 = conn.prepareStatement(query);
                userBalance = userBalance + depositAmount;
                smt1.setDouble(1, userBalance);
                smt1.setString(2, userAccountNumber);
                smt1.executeUpdate();
                JOptionPane.showMessageDialog(null, "Transaction successful.", "Deposit", JOptionPane.INFORMATION_MESSAGE);
                balanceInquiry();
            }
            smt1.close();
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private double withdrawCharge = 15;
    
    private void withdraw(){
        try {
            // TODO add your handling code here: 
            double withdrawAmount = Double.parseDouble(JOptionPane.showInputDialog(null, "How much to withdraw: ", "Withdraw", JOptionPane.INFORMATION_MESSAGE));
            int confirmWithdraw = JOptionPane.showConfirmDialog(null, "Confirm Withdraw", "Withdraw", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if(confirmWithdraw == JOptionPane.YES_OPTION){
                if(!(userBalance <= 100)){
                    if(!(withdrawAmount >= userBalance)){
                        if(withdrawAmount % 100 != 0){
                            JOptionPane.showMessageDialog(null, "Withdrawal amount must be in denominations of 100.", "Withdraw", JOptionPane.ERROR_MESSAGE);
                            withdraw();
                        }
                        else{
                            String query = "UPDATE bank_db.accounts SET balance=? WHERE account_number=?";
                            smt1 = conn.prepareStatement(query);
                            userBalance = userBalance - withdrawAmount - withdrawCharge;
                            smt1.setDouble(1, userBalance);
                            smt1.setString(2, userAccountNumber);
                            smt1.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Transaction successful.", "Withdraw", JOptionPane.INFORMATION_MESSAGE);
                            balanceInquiry();
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Cannot withdraw more than the balance amount.\nTry again.", "Withdraw", JOptionPane.ERROR_MESSAGE);
                        withdraw();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Balance must be greater than 100. Cannot withdraw desired amount.\nTry Again.", "Withdraw", JOptionPane.ERROR_MESSAGE);
                    withdraw();
                }      
            }
            smt1.close();
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private double transferCharge = 15;
    
    private void transfer() {
        try {
            // TODO add your handling code here: 
            transferAccountNumber = JOptionPane.showInputDialog(null, "Input Account # to transfer: ", "Transfer", JOptionPane.INFORMATION_MESSAGE).trim();
            double transferAmount = Double.parseDouble(JOptionPane.showInputDialog(null, "How much to transfer: ", "Transfer", JOptionPane.INFORMATION_MESSAGE));
            int confirmTransfer = JOptionPane.showConfirmDialog(null, "Confirm Transfer", "Transfer", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if(confirmTransfer == JOptionPane.YES_OPTION){
                if(!(transferAmount >= userBalance)){
                    //for current user account
                    String query1 = "UPDATE bank_db.accounts SET balance=? WHERE account_number=?";
                    smt1 = conn.prepareStatement(query1);
                    userBalance = userBalance - transferAmount - transferCharge;
                    smt1.setDouble(1, userBalance);
                    smt1.setString(2, userAccountNumber);
                    smt1.executeUpdate();

                    //for transfer amount to a specific account number
                    transferBalance = accessTransferAccount(transferAccountNumber) + transferAmount;
                    String query2 = "UPDATE bank_db.accounts SET balance=? WHERE account_number=?";
                    smt2 = conn.prepareStatement(query2);
                    smt2.setDouble(1, transferBalance);
                    smt2.setString(2, transferAccountNumber);
                    smt2.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Transaction successful.", "Transfer", JOptionPane.INFORMATION_MESSAGE);
                    balanceInquiry();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Cannot transfer more than the balance amount.\nTry again.", "Transfer", JOptionPane.ERROR_MESSAGE);
                    transfer();
                }        
            }
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private double accessTransferAccount(String transferAccountNumber){
        try {
            String query = "SELECT balance from accounts WHERE account_number=?"; 
            smt2 = conn.prepareStatement(query);
            smt2.setString(1, transferAccountNumber);
            rs2 = smt2.executeQuery();
            
            while(rs2.next()){
                transferBalance = rs2.getDouble("balance"); 
                //System.out.println(transferBalance);       
            }
            rs2.close();
            smt2.close();
        } catch (SQLException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }   
        
        return transferBalance;
    }
    
    private void balanceInquiry(){
        try {
            String query = "SELECT balance from accounts WHERE account_number=?"; 
            smt1 = conn.prepareStatement(query);
            smt1.setString(1, userAccountNumber);
            rs1 = smt1.executeQuery();
            while(rs1.next()){
                userBalance = rs1.getDouble("balance"); 
            }
            rs1.close();
            smt1.close();
            JOptionPane.showMessageDialog(null, "Current Balance: " + userBalance, "Balance Inquiry", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(UserMainDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserMainDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserMainDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserMainDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserMainDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMainDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_balanceInquiiry;
    private javax.swing.JButton jButton_deposit;
    private javax.swing.JButton jButton_transfer;
    private javax.swing.JButton jButton_withdraw;
    // End of variables declaration//GEN-END:variables

    
}
